// Material wrapper generated by shader translator tool
using System;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        [SuppressMessage("ReSharper", "InconsistentNaming")]
        [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
        [SuppressMessage("ReSharper", "UnusedMember.Global")]
        [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
        [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
        public class Standard : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const String shaderName = "Standard";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Color, default = (1.000000,1.000000,1.000000,1.000000)
                public const String colorKey = "_Color";
                public Int32 colorID { get; private set; }

                // Albedo, default = "white" { }
                public const String mainTexKey = "_MainTex";
                public Int32 mainTexID { get; private set; }

                // Alpha Cutoff, default = 0.500000
                public const String cutoffKey = "_Cutoff";
                public Int32 cutoffID { get; private set; }

                // Smoothness, default = 0.500000
                public const String glossinessKey = "_Glossiness";
                public Int32 glossinessID { get; private set; }

                // Smoothness Scale, default = 1.000000
                public const String glossMapScaleKey = "_GlossMapScale";
                public Int32 glossMapScaleID { get; private set; }

                // Smoothness texture channel, default = 0.000000
                public const String smoothnessTextureChannelKey = "_SmoothnessTextureChannel";
                public Int32 smoothnessTextureChannelID { get; private set; }

                // Metallic, default = 0.000000
                public const String metallicKey = "_Metallic";
                public Int32 metallicID { get; private set; }

                // Metallic, default = "white" { }
                public const String metallicGlossMapKey = "_MetallicGlossMap";
                public Int32 metallicGlossMapID { get; private set; }

                // Specular Highlights, default = 1.000000
                public const String specularHighlightsKey = "_SpecularHighlights";
                public Int32 specularHighlightsID { get; private set; }

                // Glossy Reflections, default = 1.000000
                public const String glossyReflectionsKey = "_GlossyReflections";
                public Int32 glossyReflectionsID { get; private set; }

                // Scale, default = 1.000000
                public const String bumpScaleKey = "_BumpScale";
                public Int32 bumpScaleID { get; private set; }

                // Normal Map, default = "bump" { }
                public const String bumpMapKey = "_BumpMap";
                public Int32 bumpMapID { get; private set; }

                // Height Scale, default = 0.020000
                public const String parallaxKey = "_Parallax";
                public Int32 parallaxID { get; private set; }

                // Height Map, default = "black" { }
                public const String parallaxMapKey = "_ParallaxMap";
                public Int32 parallaxMapID { get; private set; }

                // Strength, default = 1.000000
                public const String occlusionStrengthKey = "_OcclusionStrength";
                public Int32 occlusionStrengthID { get; private set; }

                // Occlusion, default = "white" { }
                public const String occlusionMapKey = "_OcclusionMap";
                public Int32 occlusionMapID { get; private set; }

                // Color, default = (0.000000,0.000000,0.000000,1.000000)
                public const String emissionColorKey = "_EmissionColor";
                public Int32 emissionColorID { get; private set; }

                // Emission, default = "white" { }
                public const String emissionMapKey = "_EmissionMap";
                public Int32 emissionMapID { get; private set; }

                // Detail Mask, default = "white" { }
                public const String detailMaskKey = "_DetailMask";
                public Int32 detailMaskID { get; private set; }

                // Detail Albedo x2, default = "grey" { }
                public const String detailAlbedoMapKey = "_DetailAlbedoMap";
                public Int32 detailAlbedoMapID { get; private set; }

                // Scale, default = 1.000000
                public const String detailNormalMapScaleKey = "_DetailNormalMapScale";
                public Int32 detailNormalMapScaleID { get; private set; }

                // Normal Map, default = "bump" { }
                public const String detailNormalMapKey = "_DetailNormalMap";
                public Int32 detailNormalMapID { get; private set; }

                // UV Set for secondary textures, default = 0.000000
                public const String UVSecKey = "_UVSec";
                public Int32 UVSecID { get; private set; }

                // __mode, default = 0.000000
                public const String modeKey = "_Mode";
                public Int32 modeID { get; private set; }

                // __src, default = 1.000000
                public const String srcBlendKey = "_SrcBlend";
                public Int32 srcBlendID { get; private set; }

                // __dst, default = 0.000000
                public const String dstBlendKey = "_DstBlend";
                public Int32 dstBlendID { get; private set; }

                // __zw, default = 1.000000
                public const String ZWriteKey = "_ZWrite";
                public Int32 ZWriteID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    colorID = Shader.PropertyToID(colorKey);
                    mainTexID = Shader.PropertyToID(mainTexKey);
                    cutoffID = Shader.PropertyToID(cutoffKey);
                    glossinessID = Shader.PropertyToID(glossinessKey);
                    glossMapScaleID = Shader.PropertyToID(glossMapScaleKey);
                    smoothnessTextureChannelID = Shader.PropertyToID(smoothnessTextureChannelKey);
                    metallicID = Shader.PropertyToID(metallicKey);
                    metallicGlossMapID = Shader.PropertyToID(metallicGlossMapKey);
                    specularHighlightsID = Shader.PropertyToID(specularHighlightsKey);
                    glossyReflectionsID = Shader.PropertyToID(glossyReflectionsKey);
                    bumpScaleID = Shader.PropertyToID(bumpScaleKey);
                    bumpMapID = Shader.PropertyToID(bumpMapKey);
                    parallaxID = Shader.PropertyToID(parallaxKey);
                    parallaxMapID = Shader.PropertyToID(parallaxMapKey);
                    occlusionStrengthID = Shader.PropertyToID(occlusionStrengthKey);
                    occlusionMapID = Shader.PropertyToID(occlusionMapKey);
                    emissionColorID = Shader.PropertyToID(emissionColorKey);
                    emissionMapID = Shader.PropertyToID(emissionMapKey);
                    detailMaskID = Shader.PropertyToID(detailMaskKey);
                    detailAlbedoMapID = Shader.PropertyToID(detailAlbedoMapKey);
                    detailNormalMapScaleID = Shader.PropertyToID(detailNormalMapScaleKey);
                    detailNormalMapID = Shader.PropertyToID(detailNormalMapKey);
                    UVSecID = Shader.PropertyToID(UVSecKey);
                    modeID = Shader.PropertyToID(modeKey);
                    srcBlendID = Shader.PropertyToID(srcBlendKey);
                    dstBlendID = Shader.PropertyToID(dstBlendKey);
                    ZWriteID = Shader.PropertyToID(ZWriteKey);
                }
            }

            public enum TextureChannel
            {
                MetallicAlpha = 0,
                AlbedoAlpha = 1
            }

            public enum UVSet
            {
                UV0 = 0,
                UV1 = 1
            }

            // Is some random material this material
            public static Boolean UsesSameShader(Material m)
            {
            	return m.shader.name == Properties.shader.name;
            }

            // Color, default = (1.000000,1.000000,1.000000,1.000000)
            public new Color color
            {
                get { return GetColor (Properties.Instance.colorID); }
                set { SetColor (Properties.Instance.colorID, value); }
            }

            // Albedo, default = "white" { }
            public Texture2D mainTex
            {
                get { return GetTexture (Properties.Instance.mainTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.mainTexID, value); }
            }

            public Vector2 mainTexScale
            {
                get { return GetTextureScale (Properties.mainTexKey); }
                set { SetTextureScale (Properties.mainTexKey, value); }
            }

            public Vector2 mainTexOffset
            {
                get { return GetTextureOffset (Properties.mainTexKey); }
                set { SetTextureOffset (Properties.mainTexKey, value); }
            }

            // Alpha Cutoff, default = 0.500000
            public Single cutoff
            {
                get { return GetFloat (Properties.Instance.cutoffID); }
                set { SetFloat (Properties.Instance.cutoffID, Mathf.Clamp(value,0.000000f,1.000000f)); }
            }

            // Smoothness, default = 0.500000
            public Single glossiness
            {
                get { return GetFloat (Properties.Instance.glossinessID); }
                set { SetFloat (Properties.Instance.glossinessID, Mathf.Clamp(value,0.000000f,1.000000f)); }
            }

            // Smoothness Scale, default = 1.000000
            public Single glossMapScale
            {
                get { return GetFloat (Properties.Instance.glossMapScaleID); }
                set { SetFloat (Properties.Instance.glossMapScaleID, Mathf.Clamp(value,0.000000f,1.000000f)); }
            }

            // Smoothness texture channel, default = 0.000000
            public TextureChannel smoothnessTextureChannel
            {
                get { return (TextureChannel)GetFloat (Properties.Instance.smoothnessTextureChannelID); }
                set { SetFloat (Properties.Instance.smoothnessTextureChannelID, (Int32)value); }
            }

            // Metallic, default = 0.000000
            public Single metallic
            {
                get { return GetFloat (Properties.Instance.metallicID); }
                set { SetFloat (Properties.Instance.metallicID, Mathf.Clamp(value,0.000000f,1.000000f)); }
            }

            // Metallic, default = "white" { }
            public Texture2D metallicGlossMap
            {
                get { return GetTexture (Properties.Instance.metallicGlossMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.metallicGlossMapID, value); }
            }

            public Vector2 metallicGlossMapScale
            {
                get { return GetTextureScale (Properties.metallicGlossMapKey); }
                set { SetTextureScale (Properties.metallicGlossMapKey, value); }
            }

            public Vector2 metallicGlossMapOffset
            {
                get { return GetTextureOffset (Properties.metallicGlossMapKey); }
                set { SetTextureOffset (Properties.metallicGlossMapKey, value); }
            }

            // Specular Highlights, default = 1.000000
            public Boolean specularHighlights
            {
                get { return GetFloat (Properties.Instance.specularHighlightsID) > 0f; }
                set { SetFloat (Properties.Instance.specularHighlightsID, value ? 1f : 0f); }
            }

            // Glossy Reflections, default = 1.000000
            public Boolean glossyReflections
            {
                get { return GetFloat (Properties.Instance.glossyReflectionsID) > 0f; }
                set { SetFloat (Properties.Instance.glossyReflectionsID, value ? 1f : 0f); }
            }

            // Scale, default = 1.000000
            public Single bumpScale
            {
                get { return GetFloat (Properties.Instance.bumpScaleID); }
                set { SetFloat (Properties.Instance.bumpScaleID, value); }
            }

            // Normal Map, default = "bump" { }
            public Texture2D bumpMap
            {
                get { return GetTexture (Properties.bumpMapKey) as Texture2D; }
                set { SetTexture (Properties.bumpMapKey, value); }
            }

            public Vector2 bumpMapScale
            {
                get { return GetTextureScale (Properties.bumpMapKey); }
                set { SetTextureScale (Properties.bumpMapKey, value); }
            }

            public Vector2 bumpMapOffset
            {
                get { return GetTextureOffset (Properties.bumpMapKey); }
                set { SetTextureOffset (Properties.bumpMapKey, value); }
            }

            // Height Scale, default = 0.020000
            public Single parallax
            {
                get { return GetFloat (Properties.Instance.parallaxID); }
                set { SetFloat (Properties.Instance.parallaxID, Mathf.Clamp(value,0.005000f,0.080000f)); }
            }

            // Height Map, default = "black" { }
            public Texture2D parallaxMap
            {
                get { return GetTexture (Properties.Instance.parallaxMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.parallaxMapID, value); }
            }

            public Vector2 parallaxMapScale
            {
                get { return GetTextureScale (Properties.parallaxMapKey); }
                set { SetTextureScale (Properties.parallaxMapKey, value); }
            }

            public Vector2 parallaxMapOffset
            {
                get { return GetTextureOffset (Properties.parallaxMapKey); }
                set { SetTextureOffset (Properties.parallaxMapKey, value); }
            }

            // Strength, default = 1.000000
            public Single occlusionStrength
            {
                get { return GetFloat (Properties.Instance.occlusionStrengthID); }
                set { SetFloat (Properties.Instance.occlusionStrengthID, Mathf.Clamp(value,0.000000f,1.000000f)); }
            }

            // Occlusion, default = "white" { }
            public Texture2D occlusionMap
            {
                get { return GetTexture (Properties.Instance.occlusionMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.occlusionMapID, value); }
            }

            public Vector2 occlusionMapScale
            {
                get { return GetTextureScale (Properties.occlusionMapKey); }
                set { SetTextureScale (Properties.occlusionMapKey, value); }
            }

            public Vector2 occlusionMapOffset
            {
                get { return GetTextureOffset (Properties.occlusionMapKey); }
                set { SetTextureOffset (Properties.occlusionMapKey, value); }
            }

            // Color, default = (0.000000,0.000000,0.000000,1.000000)
            public Color emissionColor
            {
                get { return GetColor (Properties.Instance.emissionColorID); }
                set { SetColor (Properties.Instance.emissionColorID, value); }
            }

            // Emission, default = "white" { }
            public Texture2D emissionMap
            {
                get { return GetTexture (Properties.Instance.emissionMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.emissionMapID, value); }
            }

            public Vector2 emissionMapScale
            {
                get { return GetTextureScale (Properties.emissionMapKey); }
                set { SetTextureScale (Properties.emissionMapKey, value); }
            }

            public Vector2 emissionMapOffset
            {
                get { return GetTextureOffset (Properties.emissionMapKey); }
                set { SetTextureOffset (Properties.emissionMapKey, value); }
            }

            // Detail Mask, default = "white" { }
            public Texture2D detailMask
            {
                get { return GetTexture (Properties.Instance.detailMaskID) as Texture2D; }
                set { SetTexture (Properties.Instance.detailMaskID, value); }
            }

            public Vector2 detailMaskScale
            {
                get { return GetTextureScale (Properties.detailMaskKey); }
                set { SetTextureScale (Properties.detailMaskKey, value); }
            }

            public Vector2 detailMaskOffset
            {
                get { return GetTextureOffset (Properties.detailMaskKey); }
                set { SetTextureOffset (Properties.detailMaskKey, value); }
            }

            // Detail Albedo x2, default = "grey" { }
            public Texture2D detailAlbedoMap
            {
                get { return GetTexture (Properties.Instance.detailAlbedoMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.detailAlbedoMapID, value); }
            }

            public Vector2 detailAlbedoMapScale
            {
                get { return GetTextureScale (Properties.detailAlbedoMapKey); }
                set { SetTextureScale (Properties.detailAlbedoMapKey, value); }
            }

            public Vector2 detailAlbedoMapOffset
            {
                get { return GetTextureOffset (Properties.detailAlbedoMapKey); }
                set { SetTextureOffset (Properties.detailAlbedoMapKey, value); }
            }

            // Normal Map, default = "bump" { }
            public Texture2D detailNormalMap
            {
                get { return GetTexture (Properties.Instance.detailNormalMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.detailNormalMapID, value); }
            }

            // Scale, default = 1.000000
            public Single detailNormalMapScale
            {
                get { return GetFloat (Properties.detailNormalMapScaleKey); }
                set { SetFloat (Properties.detailNormalMapScaleKey, value); }
            }

            public Vector2 detailNormalMapOffset
            {
                get { return GetTextureOffset (Properties.detailNormalMapScaleKey); }
                set { SetTextureOffset (Properties.detailNormalMapScaleKey, value); }
            }

            // UV Set for secondary textures, default = 0.000000
            public UVSet UVSec
            {
                get { return (UVSet)GetFloat (Properties.Instance.UVSecID); }
                set { SetFloat (Properties.Instance.UVSecID, (Int32)value); }
            }

            // __mode, default = 0.000000
            public Single mode
            {
                get { return GetFloat (Properties.Instance.modeID); }
                set { SetFloat (Properties.Instance.modeID, value); }
            }

            // __src, default = 1.000000
            public Single srcBlend
            {
                get { return GetFloat (Properties.Instance.srcBlendID); }
                set { SetFloat (Properties.Instance.srcBlendID, value); }
            }

            // __dst, default = 0.000000
            public Single dstBlend
            {
                get { return GetFloat (Properties.Instance.dstBlendID); }
                set { SetFloat (Properties.Instance.dstBlendID, value); }
            }

            // __zw, default = 1.000000
            public Single ZWrite
            {
                get { return GetFloat (Properties.Instance.ZWriteID); }
                set { SetFloat (Properties.Instance.ZWriteID, value); }
            }

            public Standard() : base(Properties.shader)
            {
            }

            [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
            public Standard(String contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public Standard(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Standard shader required");
            }

        }
    }
}
