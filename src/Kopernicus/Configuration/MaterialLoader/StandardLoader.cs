// Material wrapper generated by shader translator tool
using System;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        [SuppressMessage("ReSharper", "UnusedMember.Local")]
        [SuppressMessage("ReSharper", "InconsistentNaming")]
        public class StandardLoader : Standard
        {
            // Color, default = (1.000000,1.000000,1.000000,1.000000)
            [ParserTarget("color", Optional = true)]
            public ColorParser colorSetter
            {
                get { return color; }
                set { color = value; }
            }

            // Albedo, default = "white" { }
            [ParserTarget("mainTex", Optional = true)]
            public Texture2DParser mainTexSetter
            {
                get { return mainTex; }
                set { mainTex = value; }
            }

            [ParserTarget("mainTexScale", Optional = true)]
            public Vector2Parser mainTexScaleSetter
            {
                get { return mainTexScale; }
                set { mainTexScale = value; }
            }

            [ParserTarget("mainTexOffset", Optional = true)]
            public Vector2Parser mainTexOffsetSetter
            {
                get { return mainTexOffset; }
                set { mainTexOffset = value; }
            }

            // Alpha Cutoff, default = 0.500000
            [ParserTarget("cutoff", Optional = true)]
            public NumericParser<Single> cutoffSetter
            {
                get { return cutoff; }
                set { cutoff = value; }
            }

            // Smoothness, default = 0.500000
            [ParserTarget("glossiness", Optional = true)]
            public NumericParser<Single> glossinessSetter
            {
                get { return glossiness; }
                set { glossiness = value; }
            }

            // Smoothness Scale, default = 1.000000
            [ParserTarget("glossMapScale", Optional = true)]
            public NumericParser<Single> glossMapScaleSetter
            {
                get { return glossMapScale; }
                set { glossMapScale = value; }
            }

            // Smoothness texture channel, default = 0.000000
            [ParserTarget("smoothnessTextureChannel", Optional = true)]
            public EnumParser<TextureChannel> smoothnessTextureChannelSetter
            {
                get { return smoothnessTextureChannel; }
                set { smoothnessTextureChannel = value; }
            }

            // Metallic, default = 0.000000
            [ParserTarget("metallic", Optional = true)]
            public NumericParser<Single> metallicSetter
            {
                get { return metallic; }
                set { metallic = value; }
            }

            // Metallic, default = "white" { }
            [ParserTarget("metallicGlossMap", Optional = true)]
            public Texture2DParser metallicGlossMapSetter
            {
                get { return metallicGlossMap; }
                set { metallicGlossMap = value; }
            }

            [ParserTarget("metallicGlossMapScale", Optional = true)]
            public Vector2Parser metallicGlossMapScaleSetter
            {
                get { return metallicGlossMapScale; }
                set { metallicGlossMapScale = value; }
            }

            [ParserTarget("metallicGlossMapOffset", Optional = true)]
            public Vector2Parser metallicGlossMapOffsetSetter
            {
                get { return metallicGlossMapOffset; }
                set { metallicGlossMapOffset = value; }
            }

            // Specular Highlights, default = 1.000000
            [ParserTarget("specularHighlights", Optional = true)]
            public NumericParser<Boolean> specularHighlightsSetter
            {
                get { return specularHighlights; }
                set { specularHighlights = value; }
            }

            // Glossy Reflections, default = 1.000000
            [ParserTarget("glossyReflections", Optional = true)]
            public NumericParser<Boolean> glossyReflectionsSetter
            {
                get { return glossyReflections; }
                set { glossyReflections = value; }
            }

            // Scale, default = 1.000000
            [ParserTarget("bumpScale", Optional = true)]
            public NumericParser<Single> bumpScaleSetter
            {
                get { return bumpScale; }
                set { bumpScale = value; }
            }

            // Normal Map, default = "bump" { }
            [ParserTarget("bumpMap", Optional = true)]
            public Texture2DParser bumpMapSetter
            {
                get { return bumpMap; }
                set { bumpMap = value; }
            }

            [ParserTarget("bumpMapScale", Optional = true)]
            public Vector2Parser bumpMapScaleSetter
            {
                get { return bumpMapScale; }
                set { bumpMapScale = value; }
            }

            [ParserTarget("bumpMapOffset", Optional = true)]
            public Vector2Parser bumpMapOffsetSetter
            {
                get { return bumpMapOffset; }
                set { bumpMapOffset = value; }
            }

            // Height Scale, default = 0.020000
            [ParserTarget("parallax", Optional = true)]
            public NumericParser<Single> parallaxSetter
            {
                get { return parallax; }
                set { parallax = value; }
            }

            // Height Map, default = "black" { }
            [ParserTarget("parallaxMap", Optional = true)]
            public Texture2DParser parallaxMapSetter
            {
                get { return parallaxMap; }
                set { parallaxMap = value; }
            }

            [ParserTarget("parallaxMapScale", Optional = true)]
            public Vector2Parser parallaxMapScaleSetter
            {
                get { return parallaxMapScale; }
                set { parallaxMapScale = value; }
            }

            [ParserTarget("parallaxMapOffset", Optional = true)]
            public Vector2Parser parallaxMapOffsetSetter
            {
                get { return parallaxMapOffset; }
                set { parallaxMapOffset = value; }
            }

            // Strength, default = 1.000000
            [ParserTarget("occlusionStrength", Optional = true)]
            public NumericParser<Single> occlusionStrengthSetter
            {
                get { return occlusionStrength; }
                set { occlusionStrength = value; }
            }

            // Occlusion, default = "white" { }
            [ParserTarget("occlusionMap", Optional = true)]
            public Texture2DParser occlusionMapSetter
            {
                get { return occlusionMap; }
                set { occlusionMap = value; }
            }

            [ParserTarget("occlusionMapScale", Optional = true)]
            public Vector2Parser occlusionMapScaleSetter
            {
                get { return occlusionMapScale; }
                set { occlusionMapScale = value; }
            }

            [ParserTarget("occlusionMapOffset", Optional = true)]
            public Vector2Parser occlusionMapOffsetSetter
            {
                get { return occlusionMapOffset; }
                set { occlusionMapOffset = value; }
            }

            // Color, default = (0.000000,0.000000,0.000000,1.000000)
            [ParserTarget("emissionColor", Optional = true)]
            public ColorParser emissionColorSetter
            {
                get { return emissionColor; }
                set { emissionColor = value; }
            }

            // Emission, default = "white" { }
            [ParserTarget("emissionMap", Optional = true)]
            public Texture2DParser emissionMapSetter
            {
                get { return emissionMap; }
                set { emissionMap = value; }
            }

            [ParserTarget("emissionMapScale", Optional = true)]
            public Vector2Parser emissionMapScaleSetter
            {
                get { return emissionMapScale; }
                set { emissionMapScale = value; }
            }

            [ParserTarget("emissionMapOffset", Optional = true)]
            public Vector2Parser emissionMapOffsetSetter
            {
                get { return emissionMapOffset; }
                set { emissionMapOffset = value; }
            }

            // Detail Mask, default = "white" { }
            [ParserTarget("detailMask", Optional = true)]
            public Texture2DParser detailMaskSetter
            {
                get { return detailMask; }
                set { detailMask = value; }
            }

            [ParserTarget("detailMaskScale", Optional = true)]
            public Vector2Parser detailMaskScaleSetter
            {
                get { return detailMaskScale; }
                set { detailMaskScale = value; }
            }

            [ParserTarget("detailMaskOffset", Optional = true)]
            public Vector2Parser detailMaskOffsetSetter
            {
                get { return detailMaskOffset; }
                set { detailMaskOffset = value; }
            }

            // Detail Albedo x2, default = "grey" { }
            [ParserTarget("detailAlbedoMap", Optional = true)]
            public Texture2DParser detailAlbedoMapSetter
            {
                get { return detailAlbedoMap; }
                set { detailAlbedoMap = value; }
            }

            [ParserTarget("detailAlbedoMapScale", Optional = true)]
            public Vector2Parser detailAlbedoMapScaleSetter
            {
                get { return detailAlbedoMapScale; }
                set { detailAlbedoMapScale = value; }
            }

            [ParserTarget("detailAlbedoMapOffset", Optional = true)]
            public Vector2Parser detailAlbedoMapOffsetSetter
            {
                get { return detailAlbedoMapOffset; }
                set { detailAlbedoMapOffset = value; }
            }

            // Normal Map, default = "bump" { }
            [ParserTarget("detailNormalMap", Optional = true)]
            public Texture2DParser detailNormalMapSetter
            {
                get { return detailNormalMap; }
                set { detailNormalMap = value; }
            }

            // Scale, default = 1.000000
            [ParserTarget("detailNormalMapScale", Optional = true)]
            public NumericParser<Single> detailNormalMapScaleSetter
            {
                get { return detailNormalMapScale; }
                set { detailNormalMapScale = value; }
            }

            [ParserTarget("detailNormalMapOffset", Optional = true)]
            public Vector2Parser detailNormalMapOffsetSetter
            {
                get { return detailNormalMapOffset; }
                set { detailNormalMapOffset = value; }
            }

            // UV Set for secondary textures, default = 0.000000
            [ParserTarget("UVSec", Optional = true)]
            public EnumParser<UVSet> UVSecSetter
            {
                get { return UVSec; }
                set { UVSec = value; }
            }

            // __mode, default = 0.000000
            [ParserTarget("mode", Optional = true)]
            public NumericParser<Single> modeSetter
            {
                get { return mode; }
                set { mode = value; }
            }

            // __src, default = 1.000000
            [ParserTarget("srcBlend", Optional = true)]
            public NumericParser<Single> srcBlendSetter
            {
                get { return srcBlend; }
                set { srcBlend = value; }
            }

            // __dst, default = 0.000000
            [ParserTarget("dstBlend", Optional = true)]
            public NumericParser<Single> dstBlendSetter
            {
                get { return dstBlend; }
                set { dstBlend = value; }
            }

            // __zw, default = 1.000000
            [ParserTarget("ZWrite", Optional = true)]
            public NumericParser<Single> ZWriteSetter
            {
                get { return ZWrite; }
                set { ZWrite = value; }
            }

            // Constructors
            public StandardLoader () : base() { }
            [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
            public StandardLoader (String contents) : base (contents) { }
            public StandardLoader (Material material) : base(material) { }
        }
    }
}
